// prisma/seed.ts ------------------------------------------------------------
import { PrismaClient, Role } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

/** -------------------- CONFIG -------------------- */
const PASSWORD_PLAINTEXT = 'password123'
const BCRYPT_ROUNDS = 10

const usersSeed = [
	{ email: 'admin@example.com', firstName: 'Admin', lastName: 'User', role: Role.ADMIN },
	{ email: 'po@example.com', firstName: 'Product', lastName: 'Owner', role: Role.PRODUCT_OWNER },
	{ email: 'scrum@example.com', firstName: 'Scrum', lastName: 'Master', role: Role.SCRUM_MASTER },
	{ email: 'dev@example.com', firstName: 'Dev', lastName: 'User', role: Role.DEVELOPER },
	{ email: 'user@example.com', firstName: 'Basic', lastName: 'User', role: Role.USER },
] as const

const projectTitles = [
	'Application E-commerce', 'Syst√®me de Gestion RH', 'Plateforme de Formation',
	'Application Mobile Fitness', 'Dashboard Analytics', 'Syst√®me de R√©servation',
	'Plateforme de Streaming', 'Application de Livraison', 'Syst√®me de Facturation',
	'Application de Chat', 'Plateforme de Crowdfunding', 'Syst√®me de Gestion Stock',
	'Application de Voyage', 'Plateforme de Freelance', 'Syst√®me de CRM',
	'Application de Sant√©', 'Plateforme de Gaming', 'Syst√®me de Monitoring',
	'Application de Finance', 'Plateforme de Collaboration', 'Syst√®me de S√©curit√©',
	'Application de Transport', 'Plateforme de Marketplace', 'Syst√®me de Support',
	'Application de M√©dias', 'Plateforme de Formation', 'Syst√®me de Gestion Projet',
	'Application de Social', 'Plateforme de Trading', 'Syst√®me de Gestion Client',
	'Application de Design', 'Plateforme de Musique', 'Syst√®me de Gestion √âv√©nement',
	'Application de Sport', 'Plateforme de Recrutement', 'Syst√®me de Gestion Document',
	'Application de Cuisine', 'Plateforme de Location', 'Syst√®me de Gestion Inventaire',
	'Application de Mode', 'Plateforme de Donation', 'Syst√®me de Gestion Budget'
];

const projectDescriptions = [
	'D√©veloppement d\'une plateforme e-commerce compl√®te avec gestion des produits, panier et paiements',
	'Syst√®me de gestion des ressources humaines avec suivi des employ√©s et cong√©s',
	'Plateforme de formation en ligne avec cours interactifs et suivi des progr√®s',
	'Application mobile de fitness avec programmes d\'entra√Ænement personnalis√©s',
	'Dashboard analytique pour visualiser les donn√©es m√©tier en temps r√©el',
	'Syst√®me de r√©servation pour h√¥tels, restaurants et services',
	'Plateforme de streaming vid√©o avec gestion des contenus',
	'Application de livraison avec suivi en temps r√©el',
	'Syst√®me de facturation automatis√© pour entreprises',
	'Application de chat en temps r√©el avec messagerie priv√©e et groupes',
	'Plateforme de crowdfunding pour projets cr√©atifs',
	'Syst√®me de gestion de stock avec alertes automatiques',
	'Application de voyage avec r√©servation et planification',
	'Plateforme de freelance pour connecter talents et clients',
	'Syst√®me de CRM pour gestion de la relation client',
	'Application de sant√© avec suivi m√©dical et rendez-vous',
	'Plateforme de gaming avec tournois et classements',
	'Syst√®me de monitoring pour infrastructure IT',
	'Application de finance personnelle avec budgets et investissements',
	'Plateforme de collaboration pour √©quipes distribu√©es',
	'Syst√®me de s√©curit√© avec authentification multi-facteurs',
	'Application de transport avec covoiturage et VTC',
	'Marketplace pour vente et achat de produits d\'occasion',
	'Syst√®me de support client avec tickets et chat',
	'Application de m√©dias avec cr√©ation et partage de contenu',
	'Plateforme de formation professionnelle avec certifications',
	'Syst√®me de gestion de projet avec Kanban et Gantt',
	'Application de r√©seau social avec partage de moments',
	'Plateforme de trading avec graphiques et analyses',
	'Syst√®me de gestion client avec historique et notes',
	'Application de design avec outils cr√©atifs',
	'Plateforme de musique avec streaming et playlists',
	'Syst√®me de gestion d\'√©v√©nements avec billetterie',
	'Application de sport avec statistiques et d√©fis',
	'Plateforme de recrutement avec matching candidat-entreprise',
	'Syst√®me de gestion documentaire avec versioning',
	'Application de cuisine avec recettes et planification',
	'Plateforme de location de biens entre particuliers',
	'Syst√®me de gestion d\'inventaire avec codes-barres',
	'Application de mode avec tendances et shopping',
	'Plateforme de donation pour associations caritatives',
	'Syst√®me de gestion de budget personnel et familial'
];

const taskTitles = [
	'Analyse des besoins utilisateur', 'Cr√©ation des maquettes UI/UX', 'D√©veloppement frontend',
	'D√©veloppement backend', 'Configuration de la base de donn√©es', 'Tests unitaires',
	'Tests d\'int√©gration', 'Tests de performance', 'D√©ploiement en production',
	'Documentation technique', 'Formation des utilisateurs', 'Optimisation des performances',
	'S√©curisation de l\'application', 'Mise en place du monitoring', 'Gestion des erreurs',
	'Interface d\'administration', 'API REST/GraphQL', 'Authentification et autorisation',
	'Gestion des fichiers', 'Notifications en temps r√©el', 'Syst√®me de recherche',
	'Export de donn√©es', 'Import de donn√©es', 'G√©n√©ration de rapports',
	'Dashboard analytique', 'Syst√®me de backup', 'Int√©gration de paiement',
	'Gestion des emails', 'Syst√®me de commentaires', 'Gestion des r√¥les',
	'Historique des actions', 'Syst√®me de tags', 'Filtres avanc√©s',
	'Tri et pagination', 'Export PDF', 'G√©n√©ration de QR codes',
	'Syst√®me de g√©olocalisation', 'Push notifications', 'Mode hors ligne',
	'Synchronisation des donn√©es', 'Gestion des versions', 'Syst√®me de templates'
];

const taskDescriptions = [
	'Conduire des entretiens avec les utilisateurs pour identifier leurs besoins',
	'Cr√©er les maquettes et prototypes pour l\'interface utilisateur',
	'D√©velopper l\'interface utilisateur avec React/Vue/Angular',
	'D√©velopper l\'API backend avec Node.js/Python/Java',
	'Concevoir et impl√©menter le sch√©ma de base de donn√©es',
	'√âcrire les tests unitaires pour chaque fonctionnalit√©',
	'Effectuer les tests d\'int√©gration entre les composants',
	'R√©aliser les tests de charge et de performance',
	'Configurer et d√©ployer l\'application sur les serveurs de production',
	'R√©diger la documentation technique et utilisateur',
	'Former les utilisateurs finaux √† l\'utilisation du syst√®me',
	'Optimiser les requ√™tes et am√©liorer les temps de r√©ponse',
	'Impl√©menter les mesures de s√©curit√© (HTTPS, validation, etc.)',
	'Configurer les outils de monitoring et d\'alerting',
	'Impl√©menter la gestion centralis√©e des erreurs',
	'D√©velopper l\'interface d\'administration pour les gestionnaires',
	'Cr√©er l\'API REST ou GraphQL pour les √©changes de donn√©es',
	'Impl√©menter l\'authentification et la gestion des autorisations',
	'D√©velopper le syst√®me de gestion et stockage des fichiers',
	'Impl√©menter les notifications push et emails en temps r√©el',
	'D√©velopper le moteur de recherche avec filtres avanc√©s',
	'Cr√©er les fonctionnalit√©s d\'export de donn√©es (CSV, Excel)',
	'Impl√©menter l\'import de donn√©es depuis des fichiers externes',
	'D√©velopper le syst√®me de g√©n√©ration de rapports automatis√©s',
	'Cr√©er les tableaux de bord avec graphiques et m√©triques',
	'Configurer le syst√®me de sauvegarde automatique des donn√©es',
	'Int√©grer les passerelles de paiement (Stripe, PayPal)',
	'Configurer l\'envoi automatique d\'emails transactionnels',
	'Impl√©menter le syst√®me de commentaires et avis',
	'D√©velopper la gestion des r√¥les et permissions utilisateurs',
	'Cr√©er l\'historique d√©taill√© des actions utilisateurs',
	'Impl√©menter le syst√®me de tags et cat√©gorisation',
	'D√©velopper les filtres avanc√©s pour la recherche',
	'Impl√©menter le tri et la pagination des r√©sultats',
	'Cr√©er les fonctionnalit√©s d\'export en format PDF',
	'Impl√©menter la g√©n√©ration de QR codes pour les √©l√©ments',
	'Int√©grer la g√©olocalisation pour les fonctionnalit√©s mobiles',
	'Configurer les notifications push pour les applications mobiles',
	'D√©velopper le mode hors ligne avec synchronisation',
	'Impl√©menter la synchronisation des donn√©es entre appareils',
	'Cr√©er le syst√®me de gestion des versions des documents',
	'D√©velopper un syst√®me de templates personnalisables'
];

const statuses = ['√Ä faire', 'En cours', 'Termin√©'];
const priorities = ['Basse', 'Moyenne', 'Haute', 'Urgente'];
const projectStatuses = ['En attente', 'En cours', 'Termin√©', 'En pause'];
const projectPriorities = ['Basse', 'Moyenne', 'Haute', 'Urgente'];

function getRandomElement<T>(array: T[]): T {
	return array[Math.floor(Math.random() * array.length)];
}

function generateEmail(firstName: string, lastName: string, index: number): string {
	const emailUser = `${firstName.toLowerCase()}.${lastName.toLowerCase()}${index}@gmail.com`
	return emailUser
}

function getRandomDate(start: Date, end: Date): Date {
	return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

async function main() {
	console.log('üå± D√©but du seeding...');

	console.log('üßπ Nettoyage de la base de donn√©es...');
	await prisma.task.deleteMany({});
	await prisma.projectMember.deleteMany({});
	await prisma.project.deleteMany({});
	await prisma.user.deleteMany({});

	console.log('üë• Cr√©ation de 30 utilisateurs...');

	const hashedPassword = await bcrypt.hash('password123', 10);
	const users: any[] = [];

	for (let i = 1; i <= 30; i++) {
		const firstName = getRandomElement(firstNames);
		const lastName = getRandomElement(lastNames);
		const email = generateEmail(firstName, lastName, i);

		const user = await prisma.user.create({
			data: {
				email: email,
				password: hashedPassword,
				name: `${firstName} ${lastName}`,
				createdAt: new Date(Date.now()),
				updatedAt: new Date()
			},
		});

		users.push(user);
		console.log(`‚úÖ Utilisateur cr√©√©: ${user.name} (${user.email})`);
	}

	console.log('\nüèóÔ∏è Cr√©ation de 35 projets...');

	const projects: any[] = [];
	for (let i = 0; i < 35; i++) {
		const title = getRandomElement(projectTitles);
		const description = getRandomElement(projectDescriptions);
		const status = getRandomElement(projectStatuses);
		const priority = getRandomElement(projectPriorities);
		const owner = getRandomElement(users);

		const project = await prisma.project.create({
			data: {
				title: `${title} #${i + 1}`,
				description: description,
				status: status,
				priority: priority,
				ownerId: owner.id,
				createdAt: getRandomDate(new Date('2024-01-01'), new Date()),
				updatedAt: new Date()
			},
		});

		projects.push(project);
		console.log(`‚úÖ Projet cr√©√©: ${project.title} (Propri√©taire: ${owner.name})`);
	}

	console.log('\nüë• Ajout de membres aux projets...');

	for (const project of projects) {
		// Ajouter 2-5 membres par projet (en plus du propri√©taire)
		const numMembers = Math.floor(Math.random() * 4) + 2;
		const availableUsers = users.filter(user => user.id !== project.ownerId);
		const selectedUsers = availableUsers.sort(() => 0.5 - Math.random()).slice(0, numMembers);

		for (const user of selectedUsers) {
			await prisma.projectMember.create({
				data: {
					userId: user.id,
					projectId: project.id,
					addedAt: getRandomDate(project.createdAt, new Date())
				},
			});

	console.log('\nüìã Cr√©ation de t√¢ches pour chaque projet...');

	for (const project of projects) {
		// Cr√©er 5-15 t√¢ches par projet
		const numTasks = Math.floor(Math.random() * 11) + 5;
		const projectUsers = await prisma.projectMember.findMany({
			where: { projectId: project.id },
			include: { user: true }
		});
		const allProjectUsers = [project.ownerId, ...projectUsers.map(pm => pm.userId)];

		for (let i = 0; i < numTasks; i++) {
			const title = getRandomElement(taskTitles);
			const description = getRandomElement(taskDescriptions);
			const status = getRandomElement(statuses);
			const priority = getRandomElement(priorities);
			const assignedToId = Math.random() > 0.3 ? getRandomElement(allProjectUsers) : null;
			const dueDate = Math.random() > 0.5 ? getRandomDate(new Date(), new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)) : null;

			await prisma.task.create({
				data: {
					title: `${title} #${i + 1}`,
					description: description,
					status: status,
					priority: priority,
					dueDate: dueDate,
					projectId: project.id,
					assignedToId: assignedToId,
					createdAt: getRandomDate(project.createdAt, new Date()),
					updatedAt: new Date()
				},
			});
		}

		console.log(`‚úÖ ${numTasks} t√¢ches cr√©√©es pour le projet: ${project.title}`);
	}

	console.log('\nüéâ Seeding termin√© avec succ√®s !');
	console.log(`üìä R√©sum√©:`);
	console.log(`   - ${users.length} utilisateurs cr√©√©s`);
	console.log(`   - ${projects.length} projets cr√©√©s`);

	const totalMembers = await prisma.projectMember.count();
	console.log(`   - ${totalMembers} membres ajout√©s aux projets`);

	const totalTasks = await prisma.task.count();
	console.log(`   - ${totalTasks} t√¢ches cr√©√©es`);
	console.info(`‚úÖ Projects ready (${projectsSeed.length})`)
}

async function main() {
	try {
		await seedUsers()
		await seedProjectsWithMembers()
	} catch (err) {
		console.error('‚ùå Seeding failed :', err)
	} finally {
		await prisma.$disconnect()
	}
}

main()
